{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gVAuBeA,G,MAlBCC,sBAAW,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,QACnBC,EAD+C,EAAnBC,WACNF,EAAQE,SACpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,iBAC3C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,kBAAoB,qBAC1C,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAERR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MALD,IAKwDF,EAAQA,gB,iBCDnEU,EAbGC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,yBCyDVC,MA5Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEkBF,mBAAS,IAF3B,mBAEPG,EAFO,KAEGC,EAFH,OAGmBJ,mBAAS,IAH5B,mBAGNrB,EAHM,KAGI0B,EAHJ,KAiCb,OAzBAC,qBAAU,WAERnB,EAAGoB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIrC,QAASoC,EAAIE,iBAElE,IAEFT,qBAAU,WAERD,EAAYW,OAAO,6BACnB,IAcA,yBAAKpC,UAAU,OACb,yBAAKqC,IAAI,qDACX,wDAEA,0BAAMrC,UAAU,YAChB,kBAACsC,EAAA,EAAD,CAAatC,UAAU,mBACrB,kBAACuC,EAAA,EAAD,CAAOvC,UAAU,YAAYwC,YAAY,qBAAqBC,MAAOpB,EAAOqB,SAAU,SAAAC,GAAK,OAAIrB,EAASqB,EAAMC,OAAOH,UADvH,MAEE,kBAACI,EAAA,EAAD,CAAY7C,UAAU,cAAc8C,UAAWzB,EAAOhB,QAAQ,YAAYD,MAAM,UAAU2C,KAAK,SAASC,QAnBxF,SAACL,GACnBA,EAAMM,iBAEN1C,EAAGoB,WAAW,YAAYuB,IAAI,CAC5BrD,QAASwB,EACTtB,SAAUA,EACVoD,UAAW3C,IAASU,UAAUkC,WAAWC,oBAE7C/B,EAAS,MAYH,kBAAC,IAAD,OAHJ,OASA,kBAAC,IAAD,KAEIC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIrC,EAAN,EAAMA,QAAN,OACX,kBAAC,EAAD,CAASyD,IAAKpB,EAAInC,SAAUA,EAAUF,QAASA,UCjDrC0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3E,c","file":"static/js/main.74aac580.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport './Message.css'; \r\n\r\n\r\nconst Message = forwardRef(({message, username}, ref) => {\r\n    const isUser = username === message.username;\r\n    return (\r\n        <div ref={ref} className={`message ${isUser && 'message-user'}`}>\r\n            <Card className={isUser ? \"message-useCard\" : \"message-guestCard\"}>\r\n                <CardContent>\r\n                    <Typography\r\n                    color=\"white\"\r\n                    variant=\"h5\"\r\n                    component=\"h2\"\r\n                    >\r\n                    {!isUser && `${message.username || \"Unknown User\"}: `} {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n});\r\nexport default Message;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyAH9yREDjwO2cbhe6Q-on1Fe1HP2bhTgao\",\r\n    authDomain: \"soupify-chatapp.firebaseapp.com\",\r\n    databaseURL: \"https://soupify-chatapp.firebaseio.com\",\r\n    projectId: \"soupify-chatapp\",\r\n    storageBucket: \"soupify-chatapp.appspot.com\",\r\n    messagingSenderId: \"214775550710\",\r\n    appId: \"1:214775550710:web:0f29e9f3beed4cd1ea12d7\",\r\n    measurementId: \"G-0M4RBRHZEG\"\r\n  });\r\n\r\n  const db = firebaseApp.firestore();\r\n\r\n  export default db;","import React, { useState, useEffect} from 'react';\nimport { FormControl, InputLabel, Input, IconButton} from '@material-ui/core';\nimport './App.css';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\n\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const[messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n\n  // useState = variable in REACT\n  // useEffect = run a block of code with a condition\n\n  useEffect(() =>{\n    //run once when the app component loads\n    db.collection('messages')\n    .orderBy('timestamp', 'desc')\n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    });      // \"Snapshot\" will detect any new record in firebase\n  },[] )\n\n  useEffect(() => {\n    //if its [] blank inside the dependencies ,then this code runs ones when app component loads\n    setUsername(prompt('Please Enter your name'))\n  },[])\n\n  const sendMessage = (event) => {\n    event.preventDefault();                 //As form makes to refresh the page to prevent the refresh we will use this \n  \n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n  setInput('');\n                 \n  }\n  return (\n    <div className=\"App\">\n      <img src=\"https://img.icons8.com/fluent/96/000000/chat.png\"/>\n    <h1>SOUPIFY REALTIME-CHATAPP</h1>\n\n    <form className=\"app-form\">\n    <FormControl className=\"app-formControl\">\n      <Input className=\"app-input\" placeholder=\"Enter a message...\" value={input} onChange={event => setInput(event.target.value)}/>   {/* Input Field */}\n      <IconButton className=\"icon-button\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={sendMessage}>\n        <SendIcon />\n      </IconButton>  {/*button*/}\n    </FormControl>\n    </form>                                \n   \n\n    <FlipMove>\n      {\n        messages.map(({id, message}) => (\n          <Message key={id} username={username} message={message} />   //\"map\" is a fancy way to loop thorugh instead of wrting like for or while and it return something\n\n        ))\n      }\n    </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}